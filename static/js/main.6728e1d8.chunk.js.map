{"version":3,"sources":["components/navbar/navbar.js","components/logo/logo.js","components/imagelink/imagelink.js","components/rank/rank.js","components/title/title.js","components/srcimage/srcimage.js","components/imgopsbar/imgopsbar.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","Logo","_ref","tiltOptions","tilt_default","options","ImageLink","isVisible","onChange","onSubmit","hidden","id","type","placeholder","onClick","Rank","Title","SrcImage","imgsrc","clipRect","src","height","style","top","topRow","left","leftCol","right","rightCol","bottom","botRow","ImgOpsBar","onClose","class","app","Clarifai","App","apiKey","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calculateImgRect","data","clipped","outputs","regions","region_info","bounding_box","srcimg","document","getElementById","width","top_row","left_col","right_col","bottom_row","setImgRect","imgRect","setState","onUrlChange","event","imgurl","target","value","onUrlSubmit","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","isImageLinkVisible","isTitleVisible","isSrcImageVisible","models","predict","FACE_DETECT_MODEL","state","sent","opacity","stop","_x","apply","arguments","onImgOpsBarClose","tiltoptions","tilt_config","particlejsoptions","particlejs_config","particles_default","params","navbar_navbar","title_title","logo_logo","rank_rank","imagelink_imagelink","srcimage_srcimage","imgopsbar_imgopsbar","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6728e1d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './navbar.css';\r\n\r\nconst Navbar = () => {\r\n    return(\r\n        <nav className=\"navbar\">\r\n            <ul className=\"navlist\">\r\n                <li className=\"navlistelement\"><a href=\"#\">CARA</a></li>\r\n                <li className=\"navlistelement\"><a href=\"#\">REGISTER</a></li>\r\n                <li className=\"navlistelement corner\"><a href=\"#\">SIGN OUT</a></li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport './logo.css';\r\n\r\nconst Logo = ({tiltOptions}) => {\r\n    return(\r\n        <div className=\"logocontainer\">     \r\n            <Tilt className=\"Tilt\" options={tiltOptions} >\r\n            <div className=\"Tilt-inner icon\"> ðŸ‘¹ </div>\r\n            </Tilt>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './imagelink.css'\r\n\r\nconst ImageLink = ({isVisible, onChange, onSubmit}) => {\r\n    return(\r\n        <div className=\"imagelinkcontainer\" hidden={!isVisible}>\r\n            <div className=\"imagelinkform\">\r\n                <p className=\"formlinkcaption\">Paste yo Face Here!</p>\r\n                <div className=\"forminputs\">\r\n                    <input id=\"imglinktext\" className=\"formlinkurl\" type=\"text\" onChange={onChange} placeholder=\"Doesn't matter pretty or ugly, we will try to detect it!\" />\r\n                    <button className=\"formlinkdetect\" onClick={onSubmit}>ðŸ˜ˆ</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageLink;","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport './rank.css';\r\n\r\nconst Rank = ({tiltOptions}) => {\r\n    return(\r\n        <div className=\"rankcontainer\">\r\n            <div className=\"rankelements\">\r\n                <Tilt className=\"Tilt\" options={tiltOptions} >\r\n                    <div className=\"Tilt-inner rankicon\"> ðŸ¥‡ </div>\r\n                </Tilt>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Rank;","import React from 'react';\r\nimport './title.css';\r\n\r\nconst Title = ({isVisible}) => {\r\n    return(\r\n        <div className=\"titlecontainer\" hidden={!isVisible}>\r\n            <p className=\"title\">CARA</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport './srcimage.css';\r\n\r\nconst SrcImage = ({isVisible, imgsrc, clipRect}) => {\r\n    return(\r\n        <div className = \"srcimagecontainer\" hidden={!isVisible}>\r\n            <div className=\"imagecontrols\">\r\n                <img id=\"clippingpane\" src={imgsrc} className=\"image\" height=\"auto\" />\r\n                <div id=\"clipperrect\" className=\"clipper\" style={{top:clipRect.topRow, left:clipRect.leftCol, right:clipRect.rightCol, bottom:clipRect.botRow}}></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SrcImage;","import React from 'react';\r\nimport './imgopsbar.css';\r\n\r\nconst ImgOpsBar = ({isVisible, onClose}) => {\r\n    return(\r\n        <div className=\"imgopsbarcontainer\" hidden={!isVisible}>\r\n            <nav className=\"imgopsbar\" hidden={!isVisible}>\r\n                <ul className=\"navlist\">\r\n                    <li className=\"navlistelement\"><i class=\"fas fa-save\"></i></li>\r\n                    <li className=\"navlistelement\"><i class=\"fas fa-images\"></i></li>\r\n                    <li className=\"navlistelement corner\"><i class=\"fas fa-times-circle\" onClick={onClose}></i></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImgOpsBar;","import React, { Component } from 'react';\r\nimport Particles from 'react-particles-js';\r\nimport Clarifai from 'clarifai';\r\nimport Navbar from './components/navbar/navbar';\r\nimport Logo from './components/logo/logo';\r\nimport ImageLink from './components/imagelink/imagelink';\r\nimport Rank from './components/rank/rank';\r\nimport Title from './components/title/title';\r\nimport SrcImage from './components/srcimage/srcimage';\r\nimport ImgOpsBar from './components/imgopsbar/imgopsbar';\r\nimport * as tilt_config from './config/tiltjs-config.json';\r\nimport * as particlejs_config from './config/particlesjs-config.json';\r\n\r\nimport './App.css';\r\n\r\nconst app = new Clarifai.App({\r\n  apiKey: 'e443ade726174d0bad66bee03360ff12'\r\n });\r\n\r\nclass App extends Component {\r\n  constructor()\r\n  {\r\n    super();\r\n    this.state = {\r\n      imgurl:'',\r\n      isImageLinkVisible: true,\r\n      isSrcImageVisible:false,\r\n      isTitleVisible: true,\r\n      imgRect: {\r\n      }\r\n    }\r\n  }\r\n\r\n  calculateImgRect = (data) => {\r\n    const clipped = data.outputs[0].data.regions[0].region_info.bounding_box;\r\n    const srcimg = document.getElementById('clippingpane');\r\n\r\n    const width = srcimg.width;\r\n    const height = srcimg.height;\r\n\r\n    return {\r\n      topRow : height * clipped.top_row,\r\n      leftCol : width * clipped.left_col,\r\n      rightCol : width - (width * clipped.right_col),\r\n      botRow : height - (height * clipped.bottom_row)\r\n    }\r\n  }\r\n\r\n  setImgRect = (imgRect) => {\r\n    this.setState({imgRect});\r\n  }\r\n\r\n  onUrlChange = (event) => {\r\n    this.setState({imgurl:event.target.value});\r\n  }\r\n\r\n  onUrlSubmit = async (event) => {\r\n    await this.setState({isImageLinkVisible:false, isTitleVisible:false, isSrcImageVisible:true});\r\n    const response = await app.models.predict(Clarifai.FACE_DETECT_MODEL, this.state.imgurl);\r\n    await this.setImgRect(this.calculateImgRect(response));\r\n    document.getElementById('clipperrect').style.opacity=1;\r\n  }\r\n\r\n  onImgOpsBarClose = (event) => {\r\n    \r\n    document.getElementById('imglinktext').value='';\r\n    document.getElementById('clipperrect').style.opacity=0;\r\n\r\n    this.setState({\r\n      imgurl:'',\r\n      isImageLinkVisible: true,\r\n      isSrcImageVisible:false,\r\n      isTitleVisible: true,\r\n      imgRect:{}\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    const tiltoptions = tilt_config.tiltoptions;\r\n    const particlejsoptions= particlejs_config.config;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <Particles className=\"particles\" params={particlejsoptions}/>\r\n        <Navbar />\r\n        <Title isVisible = {this.state.isTitleVisible}/>\r\n        <Logo tiltOptions={tiltoptions}/>\r\n        <Rank tiltOptions={tiltoptions}/>\r\n        <ImageLink isVisible={this.state.isImageLinkVisible} onChange = {this.onUrlChange} onSubmit = {this.onUrlSubmit}/>\r\n        <SrcImage isVisible={this.state.isSrcImageVisible} imgsrc={this.state.imgurl} clipRect = {this.state.imgRect}/>\r\n        <ImgOpsBar isVisible={this.state.isSrcImageVisible} onClose={this.onImgOpsBarClose}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}